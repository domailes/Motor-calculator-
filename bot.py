import os
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters, 
    ConversationHandler, CallbackContext
)
import aiohttp
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
DEEPSEEK_API_KEY = os.environ.get('DEEPSEEK_API_KEY')

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)
if not DEEPSEEK_API_KEY:
    logger.error("‚ùå DEEPSEEK_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
POWER, VOLTAGE, EFFICIENCY, POWER_FACTOR, PHASE = range(5)

def start(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(
        "üîß *–†–∞—Å—á–µ—Ç —Ç–æ–∫–æ–≤ –¥–≤–∏–≥–∞—Ç–µ–ª—è*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–∏–Ω–∞–ª—å–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–∫–í—Ç):",
        parse_mode='Markdown'
    )
    return POWER

def power_input(update: Update, context: CallbackContext) -> int:
    try:
        power = float(update.message.text.replace(',', '.'))
        context.user_data['power'] = power
        update.message.reply_text("‚ö° –í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è (–í):")
        return VOLTAGE
    except ValueError:
        update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        return POWER

def voltage_input(update: Update, context: CallbackContext) -> int:
    try:
        voltage = float(update.message.text.replace(',', '.'))
        context.user_data['voltage'] = voltage
        update.message.reply_text("üéØ –í–≤–µ–¥–∏—Ç–µ –ö–ü–î –¥–≤–∏–≥–∞—Ç–µ–ª—è (–≤ %, –Ω–∞–ø—Ä–∏–º–µ—Ä 85):")
        return EFFICIENCY
    except ValueError:
        update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        return VOLTAGE

def efficiency_input(update: Update, context: CallbackContext) -> int:
    try:
        efficiency = float(update.message.text.replace(',', '.'))
        context.user_data['efficiency'] = efficiency
        update.message.reply_text("üìä –í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏ (cos œÜ, –Ω–∞–ø—Ä–∏–º–µ—Ä 0.85):")
        return POWER_FACTOR
    except ValueError:
        update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        return EFFICIENCY

def power_factor_input(update: Update, context: CallbackContext) -> int:
    try:
        power_factor = float(update.message.text.replace(',', '.'))
        context.user_data['power_factor'] = power_factor
        
        keyboard = [['1', '3']]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        
        update.message.reply_text(
            "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∑:",
            reply_markup=reply_markup
        )
        return PHASE
    except ValueError:
        update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        return POWER_FACTOR

def phase_input(update: Update, context: CallbackContext) -> int:
    try:
        phase = int(update.message.text)
        context.user_data['phase'] = phase
        
        update.message.reply_text(
            "‚è≥ –í—ã–ø–æ–ª–Ω—è—é —Ä–∞—Å—á–µ—Ç...",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á–µ—Ç
        asyncio.run(perform_calculation(update, context))
        
        return ConversationHandler.END
        
    except ValueError:
        update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 3!")
        return PHASE

async def perform_calculation(update: Update, context: CallbackContext):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—á–µ—Ç —á–µ—Ä–µ–∑ DeepSeek"""
    try:
        data = context.user_data
        
        prompt = f"""
        –†–∞—Å—Å—á–∏—Ç–∞–π –Ω–æ–º–∏–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫ —ç–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—è:
        - –ú–æ—â–Ω–æ—Å—Ç—å: {data['power']} –∫–í—Ç
        - –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {data['voltage']} –í
        - –ö–ü–î: {data['efficiency']}%
        - cos œÜ: {data['power_factor']}
        - –§–∞–∑—ã: {data['phase']}
        
        –î–∞–π —Ä–∞—Å—á–µ—Ç —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏ –∏ –∏—Ç–æ–≥–æ–≤—ã–π —Ç–æ–∫ –≤ –ê.
        """
        
        # –í—ã–∑–æ–≤ DeepSeek API
        deepseek_response = await call_deepseek_api(prompt)
        
        result_text = f"üîß *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:*\n\n{deepseek_response}"
        update.message.reply_text(result_text, parse_mode='Markdown')
        
        context.user_data.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞")

async def call_deepseek_api(prompt: str) -> str:
    """–í—ã–∑–æ–≤ API DeepSeek"""
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}"
    }
    
    data = {
        "model": "deepseek-chat",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.3
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "https://api.deepseek.com/v1/chat/completions", 
                headers=headers, 
                json=data, 
                timeout=30
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    return result["choices"][0]["message"]["content"]
                return f"‚ùå –û—à–∏–±–∫–∞ API: {response.status}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"

def cancel(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("‚ùå –†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω")
    context.user_data.clear()
    return ConversationHandler.END

def main():
    try:
        updater = Updater(BOT_TOKEN, use_context=True)
        dp = updater.dispatcher
        
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                POWER: [MessageHandler(Filters.text & ~Filters.command, power_input)],
                VOLTAGE: [MessageHandler(Filters.text & ~Filters.command, voltage_input)],
                EFFICIENCY: [MessageHandler(Filters.text & ~Filters.command, efficiency_input)],
                POWER_FACTOR: [MessageHandler(Filters.text & ~Filters.command, power_factor_input)],
                PHASE: [MessageHandler(Filters.text & ~Filters.command, phase_input)],
            },
            fallbacks=[CommandHandler('cancel', cancel)]
        )
        
        dp.add_handler(conv_handler)
        
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        updater.start_polling()
        updater.idle()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        exit(1)

if __name__ == '__main__':
    main()
