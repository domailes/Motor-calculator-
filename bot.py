import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import aiohttp
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ['BOT_TOKEN']
DEEPSEEK_API_KEY = os.environ['DEEPSEEK_API_KEY']
DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
POWER, VOLTAGE, EFFICIENCY, POWER_FACTOR, PHASE = range(5)
user_data = {}

async def call_deepseek_api(prompt: str) -> str:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ API DeepSeek"""
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}"
    }
    
    data = {
        "model": "deepseek-chat",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.3
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(DEEPSEEK_API_URL, headers=headers, json=data, timeout=30) as response:
                if response.status == 200:
                    result = await response.json()
                    return result["choices"][0]["message"]["content"]
                else:
                    return f"‚ùå –û—à–∏–±–∫–∞ API: {response.status}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîß **–†–∞—Å—á–µ—Ç —Ç–æ–∫–æ–≤ –¥–≤–∏–≥–∞—Ç–µ–ª—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–∏–Ω–∞–ª—å–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–∫–í—Ç):"
    )
    return POWER

async def power_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        power = float(update.message.text.replace(',', '.'))
        user_data[update.effective_user.id] = {'power': power}
        await update.message.reply_text("‚ö° –í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è (–í):")
        return VOLTAGE
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        return POWER

async def voltage_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        voltage = float(update.message.text.replace(',', '.'))
        user_data[update.effective_user.id]['voltage'] = voltage
        await update.message.reply_text("üéØ –í–≤–µ–¥–∏—Ç–µ –ö–ü–î –¥–≤–∏–≥–∞—Ç–µ–ª—è (–≤ %, –Ω–∞–ø—Ä–∏–º–µ—Ä 85):")
        return EFFICIENCY
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        return VOLTAGE

async def efficiency_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        efficiency = float(update.message.text.replace(',', '.'))
        user_data[update.effective_user.id]['efficiency'] = efficiency
        await update.message.reply_text("üìä –í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ—â–Ω–æ—Å—Ç–∏ (cos œÜ, –Ω–∞–ø—Ä–∏–º–µ—Ä 0.85):")
        return POWER_FACTOR
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        return EFFICIENCY

async def power_factor_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        power_factor = float(update.message.text.replace(',', '.'))
        user_data[update.effective_user.id]['power_factor'] = power_factor
        await update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∑ (1 –∏–ª–∏ 3):")
        return PHASE
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        return POWER_FACTOR

async def phase_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        phase = int(update.message.text)
        if phase not in [1, 3]:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 3!")
            return PHASE
        
        data = user_data[update.effective_user.id]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è DeepSeek
        prompt = f"""
        –†–∞—Å—Å—á–∏—Ç–∞–π –Ω–æ–º–∏–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫ —ç–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—è:
        - –ú–æ—â–Ω–æ—Å—Ç—å: {data['power']} –∫–í—Ç
        - –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {data['voltage']} –í  
        - –ö–ü–î: {data['efficiency']}%
        - cos œÜ: {data['power_factor']}
        - –§–∞–∑—ã: {data['phase']}
        
        –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
        1. –§–æ—Ä–º—É–ª—É —Ä–∞—Å—á–µ—Ç–∞
        2. –ü–æ—à–∞–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
        3. –ò—Ç–æ–≥–æ–≤—ã–π —Ç–æ–∫ –≤ –ê
        4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞—â–∏—Ç–Ω–æ–π –∞–ø–ø–∞—Ä–∞—Ç—É—Ä–µ
        """
        
        processing_msg = await update.message.reply_text("‚è≥ –í—ã–ø–æ–ª–Ω—è—é —Ä–∞—Å—á–µ—Ç...")
        deepseek_response = await call_deepseek_api(prompt)
        await processing_msg.delete()
        
        result_text = f"üîß **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:**\n\n{deepseek_response}"
        
        if len(result_text) > 4096:
            for x in range(0, len(result_text), 4096):
                await update.message.reply_text(result_text[x:x+4096])
        else:
            await update.message.reply_text(result_text)
        
        del user_data[update.effective_user.id]
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        return PHASE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω")
    if update.effective_user.id in user_data:
        del user_data[update.effective_user.id]
    return ConversationHandler.END

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            POWER: [MessageHandler(filters.TEXT & ~filters.COMMAND, power_input)],
            VOLTAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, voltage_input)],
            EFFICIENCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, efficiency_input)],
            POWER_FACTOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, power_factor_input)],
            PHASE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phase_input)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == '__main__':
    main()
